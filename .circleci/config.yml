version: 2.1
orbs:
  python: circleci/python@2.1.1

commands:
  setup_docker:
    description: "Setup Docker Environment"
    steps:
      - setup_remote_docker:
          version: 20.10.7
          docker_layer_caching: true

jobs:
  lint_and_format:
    docker:
      - image: cimg/python:3.12.1
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "poetry.lock" }}
      - python/install-packages:
          pkg-manager: poetry
      - run:
          name: lint and format
          command: |
            poetry run black .
            poetry run flake8 . --ignore=F841

  test_and_coverage:
    docker:
      - image: cimg/python:3.12.1
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "poetry.lock" }}
      - python/install-packages:
          pkg-manager: poetry
      - run:
          name: Test and Coverage
          command: |
            poetry run python manage.py migrate
            poetry run coverage run --source='.' manage.py test 
            poetry run coverage report

  build_and_push_docker:
    docker:
      - image: cimg/python:3.12.1
    steps:
      - checkout
      - setup_docker
      - run:
          name: Build Docker Image
          command: docker build -t $DOCKERHUB_USERNAME/p13:$CIRCLE_BUILD_NUM ./
      - run:
          name: Push Docker Image
          command: docker push $DOCKERHUB_USERNAME/p13:$CIRCLE_BUILD_NUM

  deploy:
    docker:
      - image: cimg/python:3.12.1
    steps:
      - run:
          name: Deploy
          command: |
            curl -X POST $RENDER_WEBHOOK --data "image=$DOCKERHUB_USERNAME/p13:$CIRCLE_BUILD_NUM"

workflows:
  version: 2
  all_in_one:
    jobs:
      - lint_and_format:
          filters:
            branches:
              only:
                - master
      - test_and_coverage:
          requires:
            - lint_and_format
          filters:
            branches:
              only:
                - master
      - build_and_push_docker:
          requires:
            - test_and_coverage
          filters:
            branches:
              only:
                - master
      - deploy:
          requires:
            - build_and_push_docker
          filters:
            branches:
              only:
                - master
